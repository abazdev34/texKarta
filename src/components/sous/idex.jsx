import  { useState, useEffect } from 'react';
import './sous.scss';
import beepSound from '../../assets/vse.mp3'; // –¢–∞–π–º–µ—Ä “Ø—á“Ø–Ω “Ø–Ω
import finishSound from '../../assets/finish.mp3'; // –ë–ª—é–¥–æ –¥–∞—è—Ä –±–æ–ª–≥–æ–Ω–¥–æ –æ–π–Ω–æ–ª—É—É—á—É “Ø–Ω

const SousTimer = () => {
	const [timeLeft, setTimeLeft] = useState(31 * 60);
	const [isRunning, setIsRunning] = useState(false);
	const [activeStep, setActiveStep] = useState(null);
	const [isSoundEnabled, setSoundEnabled] = useState(true);

	const beep = new Audio(beepSound); // –ò–º–ø–æ—Ä—Ç—Ç–æ–ª–≥–æ–Ω “Ø–Ω —Ñ–∞–π–ª—ã
	const finishBeep = new Audio(finishSound); // –ë–ª—é–¥–æ –¥–∞—è—Ä –±–æ–ª–≥–æ–Ω–¥–æ –æ–π–Ω–æ–ª—É—É—á—É “Ø–Ω

	const steps = [
		{ time: 30.93, action: '—Å–Ω–∞—á–∞–ª–∞ –¥–∞–±–æ–≤–∏–º –º–æ–ª–æ–∫–æ 10,500 –ª–∏—Ç—Ä–æ–≤', type: 'plate' },
		{ time: 30.83, action: '–î–æ–±–∞–≤—å—Ç–µ —Ü–∏—Ç—Ä–∞—Ç  –Ω–∞—Ç–∏—Ä–∏–π  (200–≥)', type: 'oil' },
		{ time: 30.70, action: '–î–æ–±–∞–≤—å—Ç–µ –∫–æ–ø—á–µ–Ω—ã–π –ø–∞–ø—Ä–∏–∫–∞ (130–≥)', type: 'onion' },
		{ time: 30.50, action: '–î–æ–±–∞–≤—å—Ç–µ —Å–æ–ª—å (260–≥)', type: 'pepper' },
		{ time: 30, action: '–î–æ–±–∞–≤—å—Ç–µ –ê–Ω–Ω—Ç–æ (50–≥)', type: 'tomato' },
		{ time: 28.50, action: '–¥–æ–±–∞–≤—å—Ç–µ –º–∞—Å–ª–æ (400–≥)', type: 'fry' },
		{ time: 27, action: '–ø—Ä–∏–≥–æ—Ç–æ–≤—Ç–∏ –∏–Ω–¥–æ–≥—Ü—Ç–Ω–æ–π –ø–ª–∏—Ç–∞ (3500–≥) –ø–∞—Å—Ç–æ–≤—É—é', type: 'paste' },
		{ time: 10, action: '–î–æ–±–∞–≤—å—Ç–µ —Å—ã—Ä –º–æ—Ü–∞—Ä–µ–ª–ª–∞ (2200–≥)', type: 'water' },
		{ time: 8, action: '–î–æ–±–∞–≤—å—Ç–µ —Å—ã—Ä –º–æ—Ü–∞—Ä–µ–ª–ª–∞ (2200–≥)', type: 'salt' },
		{ time: 6, action: '–î–æ–±–∞–≤—å—Ç–µ —Å—ã—Ä –º–æ—Ü–∞—Ä–µ–ª–ª–∞ (2100–≥)', type: 'srira–°hasauce' },
		{ time: 5, action: '–î–æ–±–∞–≤—å—Ç–µ (—É–∫—Å—É—Å 300–≥ —Ö–ª–∞–ø–µ–Ω—å–æ 400–≥ —Å–æ–∫ —Ö–∞–ª–∞–ø–µ–Ω—å–æ 400–≥)  )', type: 'beans' },
		{ time: 0, action: '–ë–ª—é–¥–æ –≥–æ—Ç–æ–≤–æ!', type: 'done' }
	];

	useEffect(() => {
		let interval = null;
		if (isRunning && timeLeft > 0) {
			interval = setInterval(() => {
				setTimeLeft(time => time - 1);
			}, 1000);
		} else if (timeLeft === 0) {
			// –ë–ª—é–¥–æ –¥–∞—è—Ä –±–æ–ª–≥–æ–Ω–¥–æ –±–∞—à–∫–∞ “Ø–Ω –æ–π–Ω–æ—Ç—É—É
			if (isSoundEnabled) {
				finishBeep.play();
			}
			setIsRunning(false); // –¢–∞–π–º–µ—Ä–¥–∏ —Ç–æ–∫—Ç–æ—Ç—É—É
		}
		return () => clearInterval(interval);
	}, [isRunning, timeLeft]);

	useEffect(() => {
		const minutes = timeLeft / 60;
		const step = steps.find(s => s.time === Math.floor(minutes * 100) / 100);

		if (step) {
			setActiveStep(step.type);
			if (isSoundEnabled) {
				try {
					beep.play();
					setTimeout(() => {
						beep.currentTime = 0;
						beep.play();
					}, 500);
					setTimeout(() => {
						beep.currentTime = 0;
						beep.play();
					}, 1000);
				} catch (err) {
					console.error('Sound play failed:', err);
				}
			}
			setTimeout(() => {
				setActiveStep(null);
			}, 15000);
		}
	}, [timeLeft, isSoundEnabled]);

	const formatTime = (seconds) => {
		const mins = Math.floor(seconds / 60);
		const secs = seconds % 60;
		return `${mins}:${secs.toString().padStart(2, '0')}`;
	};

	const increaseTime = () => {
		setTimeLeft(prevTime => prevTime + 60);
	};

	const decreaseTime = () => {
		setTimeLeft(prevTime => Math.max(prevTime - 60, 0));
	};

	return (
		<div className="timer">
			<div className="timer__header">
				<h1>–¢–∞–π–º–µ—Ä –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è</h1>
				<div className="timer__display">
					{formatTime(timeLeft)}
				</div>
			</div>

			<div className="timer__controls">
				<button onClick={increaseTime}>+1 –º–∏–Ω</button>
				<button onClick={decreaseTime}>-1 –º–∏–Ω</button>
				<button
					className={`timer__button ${isRunning ? 'timer__button--disabled' : ''}`}
					onClick={() => setIsRunning(true)}
					disabled={isRunning}
				>
					–ù–∞—á–∞—Ç—å
				</button>
				<button
					className="timer__button timer__button--reset"
					onClick={() => {
						setIsRunning(false);
						setTimeLeft(31 * 60);
						setActiveStep(null);
					}}
				>
					–°–±—Ä–æ—Å–∏—Ç—å
				</button>
				<button
					className={`timer__button timer__button--sound ${!isSoundEnabled ? 'timer__button--sound-off' : ''}`}
					onClick={() => setSoundEnabled(!isSoundEnabled)}
				>
					{isSoundEnabled ? 'üîä' : 'üîà'}
				</button>
			</div>

			<div className="timer__steps">
				{steps.map((step, index) => {
					const minutes = timeLeft / 60;
					const isCompleted = minutes < step.time;
					const isActive = step.type === activeStep;

					return (
						<div
							key={index}
							className={`
								timer__step
								${isCompleted ? 'timer__step--completed' : ''}
								${isActive ? 'timer__step--active' : ''}
								${timeLeft === 0 ? 'timer__step--finished' : ''} // –ö—ã–∑—ã–ª–≥–∞ ”©–∑–≥”©—Ä—Ç“Ø“Ø
							`}
						>
							<div className="timer__step-time">{step.time} –º–∏–Ω</div>
							<div className="timer__step-action">{step.action}</div>
						</div>
					);
				})}
			</div>
		</div>
	);
};

export default SousTimer;