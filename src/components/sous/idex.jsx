import { useState, useEffect } from 'react';
import './sous.scss';
import beepSound from '../../assets/vse.mp3'; // –ó–≤—É–∫ –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
import finishSound from '../../assets/finish.mp3'; // –ó–≤—É–∫, –∫–æ–≥–¥–∞ –±–ª—é–¥–æ –≥–æ—Ç–æ–≤–æ

const SousTimer = () => {
    const [timeLeft, setTimeLeft] = useState(31 * 60); // –ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 41 –º–∏–Ω—É—Ç—É
    const [isRunning, setIsRunning] = useState(false);
    const [activeStep, setActiveStep] = useState(null);
    const [isSoundEnabled, setSoundEnabled] = useState(true);

    const beep = new Audio(beepSound); // –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–≤—É–∫–æ–≤–æ–π —Ñ–∞–π–ª
    const finishBeep = new Audio(finishSound); // –ó–≤—É–∫, –∫–æ–≥–¥–∞ –±–ª—é–¥–æ –≥–æ—Ç–æ–≤–æ

    const steps = [
        { time: 30.93, action: '–î–æ–±–∞–≤—å—Ç–µ 10.5 –ª–∏—Ç—Ä–æ–≤ –º–æ–ª–æ–∫–∞', type: 'oil' },
				{ time:30.93, action: '–î–æ–±–∞–≤—å—Ç–µ 1–º–ª –≥ –∞–Ω–Ω–∞—Ç–æ', type: 'oil' },
        { time: 30.93, action: '–î–æ–±–∞–≤—å—Ç–µ 200 –≥ –Ω–∞—Ç—Ä–∏—è —Ü–∏—Ç—Ä–∞—Ç–∞', type: 'oil' },
        { time: 30.93, action: '–î–æ–±–∞–≤—å—Ç–µ 130 –≥ –∫–æ–ø—á–µ–Ω–æ–π –ø–∞–ø—Ä–∏–∫–∏', type: 'oil' },
        { time: 30.93, action: '–î–æ–±–∞–≤—å—Ç–µ 260 –≥ —Å–æ–ª–∏', type: 'oil' },
      
        { time: 30.93, action: '–î–æ–±–∞–≤—å—Ç–µ 400 –≥ –º–∞—Å–ª–∞', type: 'oil' },
        { time: 30.93, action: '–î–æ–±–∞–≤—å—Ç–µ 660 –≥ —Ç–æ–º–∞—Ç–Ω–æ–π –ø–∞—Å—Ç—ã', type: 'paste' },
        { time:30, action: '–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –ø–∞—Å—Ç—É (3500 –≥) –Ω–∞ –ø–ª–∏—Ç–µ', type: 'paste' },
        { time: 10, action: '–î–æ–±–∞–≤—å—Ç–µ 2200 –≥ —Å—ã—Ä–∞ –º–æ—Ü–∞—Ä–µ–ª–ª–∞', type: 'water' },
        { time: 8, action: '–î–æ–±–∞–≤—å—Ç–µ 2200 –≥ —Å—ã—Ä–∞ –º–æ—Ü–∞—Ä–µ–ª–ª–∞', type: 'salt' },
        { time: 6, action: '–î–æ–±–∞–≤—å—Ç–µ 2100 –≥ —Å—ã—Ä–∞ –º–æ—Ü–∞—Ä–µ–ª–ª–∞', type: 'sriracha' },
        { time: 5, action: '–î–æ–±–∞–≤—å—Ç–µ 300 –≥ —É–∫—Å—É—Å–∞ –∏ 400 –≥ —Ö–∞–ª–∞–ø–µ–Ω—å–æ –∏ —Å–æ–∫ —Ö–∞–ª–∞–ø–µ–Ω—å–æ 400–≥' , type: 'beans' },
        { time: 0, action: '–ë–ª—é–¥–æ –≥–æ—Ç–æ–≤–æ!', type: 'done' }
    ];

    useEffect(() => {
        let interval = null;
        if (isRunning && timeLeft > 0) {
            interval = setInterval(() => {
                setTimeLeft(prevTime => prevTime - 1);
            }, 1000);
        } else if (timeLeft === 0) {
            if (isSoundEnabled) {
                finishBeep.play();
            }
            setIsRunning(false); // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä
        }
        return () => clearInterval(interval);
    }, [isRunning, timeLeft]);

    useEffect(() => {
        const minutes = timeLeft / 60;
        const step = steps.find(s => s.time === Math.floor(minutes * 100) / 100);

        if (step) {
            setActiveStep(step.type);
            if (isSoundEnabled) {
                playBeep();
            }
            setTimeout(() => {
                setActiveStep(null);
            }, 15000); // –û—á–∏—Å—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —à–∞–≥ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
        }
    }, [timeLeft, isSoundEnabled]);

    const playBeep = () => {
        try {
            beep.play();
            setTimeout(() => {
                beep.currentTime = 0;
                beep.play();
            }, 500);
            setTimeout(() => {
                beep.currentTime = 0;
                beep.play();
            }, 1000);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:', err);
        }
    };



    const formatTime = (seconds) => {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${mins}:${secs.toString().padStart(2, '0')}`;
    };

    const increaseTime = () => {
        setTimeLeft(prevTime => prevTime + 60);
    };

    const decreaseTime = () => {
        setTimeLeft(prevTime => Math.max(prevTime - 60, 0));
    };

    return (
        <div className="timer">
            <div className="timer__header">
                <h1>–¢–∞–π–º–µ—Ä –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è</h1>
                <div className="timer__display">
                    {formatTime(timeLeft)}
                </div>
            </div>

            <div className="timer__controls">
                <button onClick={increaseTime}>+1 –º–∏–Ω</button>
                <button onClick={decreaseTime}>-1 –º–∏–Ω</button>
                <button
                    className={`timer__button ${isRunning ? 'timer__button--disabled' : ''}`}
                    onClick={() => setIsRunning(true)}
                    disabled={isRunning}
                >
                    –ù–∞—á–∞—Ç—å
                </button>
                <button
                    className="timer__button timer__button--reset"
                    onClick={() => {
                        setIsRunning(false);
                        setTimeLeft(41 * 60);
                        setActiveStep(null);
                    }}
                >
                    –°–±—Ä–æ—Å–∏—Ç—å
                </button>
                <button
                    className={`timer__button timer__button--sound ${!isSoundEnabled ? 'timer__button--sound-off' : ''}`}
                    onClick={() => setSoundEnabled(!isSoundEnabled)}
                >
                    {isSoundEnabled ? 'üîä' : 'üîà'}
                </button>
            </div>

            <div className="timer__steps">
                {steps.map((step, index) => {
                    const minutes = timeLeft / 60;
                    const isCompleted = minutes < step.time;
                    const isActive = step.type === activeStep;

                    return (
                        <div
                            key={index}
                            className={`timer__step
                                ${isCompleted ? 'timer__step--completed' : ''}
                                ${isActive ? 'timer__step--active' : ''}
                                ${timeLeft === 0 ? 'timer__step--finished' : ''}`}
                        >
                            <div className="timer__step-time">{step.time} –º–∏–Ω</div>
                            <div className="timer__step-action">{step.action}</div>
                        </div>
                    );
                })}
            </div>
        </div>
    );
};

export default SousTimer;